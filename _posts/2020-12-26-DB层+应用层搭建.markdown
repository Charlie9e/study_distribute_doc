---
layout: post
title:  "DB层+应用层环境搭建"
date:   2020-12-24 13:28:10 +0800
categories: docker
---
# 大纲

- 树莓派
- DB层搭建
- 应用层搭建

# 树莓派

* 下载ubuntu镜像
	- [官网镜像](https://cdimage.ubuntu.com/releases/20.10/release/)
	- [清华镜像](https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cdimage/ubuntu/releases/20.10/release/)

* 烧录镜像
```shell
df -h
diskutil list
diskutil unmountDisk /dev/disk5
sudo dd bs=4m if=ubuntu-20.10-preinstalled-server-arm64+raspi.img of=/dev/disk3
diskutil unmountDisk /dev/disk5
```

* 启动
	- 插入sd卡
	- 连接键盘 屏幕
	- 开机

* 连接wifi
	- 指令
```shell
ip a
cd /etc/netplan/
vi 50-cloud-init.yaml
netplan apply
```
	- 50-cloud-init.yaml
```yaml
network:
    ethernets:
        eth0:
            dhcp4: true
            match:
                driver: bcmgenet smsc95xx lan78xx
            optional: true
            set-name: eth0
    wifis:
        wlan0:
                dhcp4: true
                access-points:
                      "ziroom801":
                          password: "ziroomer002"
    version: 2
```
* 保持wifi连接
```shell
# 原因：网络静默一段时间后自动断开
ping 192.168.1.1 > /dev/null &
```

* ubuntu apt-get源调整
```shell
vi /etc/apt/sources.list
# 批量替换 :%s/ports.ubuntu.com/mirrors.aliyun.com/g
sudo apt-get update
apt list –installed
```

* 树莓派构建集群弊端

几番折腾，x86下的docker image无法直接运行于arm架构下, 有尝试调整Dockerfile，奇奇怪怪的问题较多。为模拟真实服务端场景，决定放弃树莓派搭建集群，使用腾讯云。

# 安装软件

* Docker
	- 安装
```shell
sudo apt install docker.io
docker -v
```
	- [参考文档](https://docs.docker.com/engine/install/centos/)

* ES
	- [参考文档](https://www.elastic.co/guide/en/elasticsearch/reference/current/rpm.html)

* Mysql
	- [参考文档](https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/)

* Redis
	- [参考文档](https://redislabs.com/get-started-with-redis/)

# Image构建

* 写在前面
  - 只有应用层适合Docker
  - DB层/消息层/服务管理层等都不适合用Docker

* DB层(Docker镜像方式)
	* Docker源替换 /etc/docker/daemon.json
```json
{
  "registry-mirrors": [
    "https://docker.mirrors.ustc.edu.cn",
    "https://hub-mirror.c.163.com",
    "https://registry.docker-cn.com"
  ]
}
```
	* Dockerfile准备
```dockerfile
FROM centos
COPY mongodb-org-4.0.repo /etc/yum.repos.d/mongodb-org-4.0.repo
RUN yum makecache
RUN yum -y install java-1.8.0-openjdk.x86_64
RUN yum install -y mysql.x86_64
RUN yum install -y mysql-server.x86_64
RUN yum install -y python2.x86_64
RUN yum install -y redis.x86_64
COPY privileges.sql /root/privileges.sql
COPY start_up.sh /root/start_up.sh
# 解决没有systemctl的问题:https://github.com/gdraheim/docker-systemctl-replacement
COPY systemctl.py /usr/bin/systemctl
RUN yum -y install mongodb-org
RUN chmod 777 /root/start_up.sh
CMD /root/start_up.sh
EXPOSE 3306 33060 6379 27017
```

	* 其他文件
1. mongodb-org-4.0.repo
```
[mngodb-org]
name=MongoDB Repository
baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/4.0/x86_64/
gpgcheck=0
enabled=1
```
2. privileges.sql 
```sql
use mysql;
select host, user from user;
ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
update user set host='%' where user='root';
flush privileges;
grant all privileges on *.* to root@'%';
flush privileges;
```
3. start_up.sh
```shell
echo '开始启动mysql....'
systemctl start mysqld.service
echo `systemctl status mysqld.service`
echo '启动mysql完毕....'
echo '开始修改密码....'
mysql < /root/privileges.sql
echo '修改密码完毕....'
echo '开始配置redis....'
sed -i 's/bind 127.0.0.1/#bind 127.0.0.1/' /etc/redis.conf
sed -i 's/protected-mode yes/protected-mode no/' /etc/redis.conf
echo '配置redis完毕....'
echo '开始启动redis....'
systemctl start redis
echo '启动redis完毕....'
echo '开始配置mongoDB....'
sed -i 's/bindIp: 127.0.0.1/bindIp: 0.0.0.0/' /etc/mongod.conf
echo '配置mongoDB完毕....'
echo '开始启动mongod....'
systemctl start mongod.service
echo '启动mongod完毕....'
echo '无聊ping'
ping 127.0.0.1
```

* DB层(直接部署)
	* 5.7 repo配置
```
[mysql57-community]
name=MySQL 5.7 Community Server
baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
```

	* mysql初始化
```shell
# /var/log/mysqld.log文件中寻找以下内容
A temporary password is generated for root@localhost:xxxxx
# mysql登陆
mysql -u root -p 
# 登陆密码修改
ALTER USER 'root'@'localhost' IDENTIFIED BY '大小写+特殊符号+数字';
SHOW VARIABLES LIKE 'validate_password%';
set global validate_password_policy=LOW;
set global validate_password_length=6;
ALTER USER 'root'@'localhost' IDENTIFIED BY '简单密码';
# mysql远程登录开启
use mysql;
select host, user from user;
ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';
update user set host='%' where user='root';
flush privileges;
grant all privileges on *.* to root@'%';
flush privileges;
```

	* 主从同步配置
		* master配置/etc/my.cnf, 新增如下
```
#主数据库端ID号
server_id=1
#开启二进制日志
log-bin=mysql-bin
#需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可
binlog-do-db=study
#将从服务器从主服务器收到的更新记入到从服务器自己的二进制日志文件中
log-slave-updates
#控制binlog的写入频率。每执行多少次事务写入一次(这个参数性能消耗很大，但可减小MySQL崩溃造成的损失)
sync_binlog=1
#这个参数一般用在主主同步中，用来错开自增值,防止键值冲突
auto_increment_offset=1
#这个参数一般用在主主同步中，用来错开自增值,防止键值冲突
auto_increment_increment=1
#二进制日志自动删除的天数，默认值为0,表示“没有自动删除”，启动时和二进制日志循环时可能删除
expire_logs_days=7
#将函数复制到slave
log_bin_trust_function_creators=1
```

		* master创建用于同步数据的账号
```
# 新建主从同步的账号
CREATE USER 'replication'@'xxx.xxx' IDENTIFIED BY 'xxxxx';
GRANT REPLICATION SLAVE ON *.* TO 'replication'@'xxx.xxx';
flush privileges;
# 查看master的状态
show master status;
```

		* slave配置/etc/my.cnf, 新增如下:
```
server_id = 2
log-bin = mysql-bin
log-slave-updates
sync_binlog = 0
#log buffer将每秒一次地写入log file中，并且log file的flush(刷到磁盘)操作同时进行。该模式下在事务提交的时候，不会主动触发写入磁盘的操作
innodb_flush_log_at_trx_commit = 0        
#指定slave要复制哪个库
replicate-do-db = study         
#MySQL主从复制的时候，当Master和Slave之间的网络中断，但是Master和Slave无法察觉的情况下（比如防火墙或者路由问题）。Slave会等待slave_net_timeout设置的秒数后，才能认为网络出现故障，然后才会重连并且追赶这段时间主库的数据
slave-net-timeout = 60                    
log_bin_trust_function_creators = 1
```

		* slave开始同步
```
#执行同步命令，设置主服务器ip，同步账号密码，同步位置
change master to master_host='xxx.xxx',master_user='xxxx',master_password='xxxxxx',master_log_file='mysql-bin.000001',master_log_pos=1670;
#开启同步功能
start slave;
```

		* slave同步出现问题排查方式
```
# 查看log_error日志文件路径
SHOW GLOBAL VARIABLES LIKE '%log%';
# 排查原因
```

* 服务层
