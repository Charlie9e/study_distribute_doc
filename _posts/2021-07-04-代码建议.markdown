---
layout: post
title:  "代码建议"
date:   2021-07-04 15:25:10 +0800
categories:  code
---
# 代码
#### 设计原则
- 单一职责
任何一个软件模块都应该只对某一类行为者负责  
e.g. 要么查询要么修改、不出现标记参数、拆分循环

- 开闭原则
良好的计算机系统应该在不需要修改的前提下就可以轻易的被扩展  

- 里氏替换原则
子类必须能够替换掉他们的父类

- 接口隔离原则
依赖的模块不应该存在不需要的内容  
e.g. 通过接口拆分职责  

- 依赖反转原则
多使用抽象接口，尽量避免使用多变的具体实现类  
不要在具体的实现类上创建衍生类  
不要override包含具体实现的函数

#### 编写规范
- 变量  
命名  
尽量少的局部变量(通过函数替代)  
多使用不可变集合 Collections.Unmodifiablexxx  

- 函数  
命名  
意图和实现分开  
功能拆分  
要么查询要么修改，单一原则  
不要出现标记参数  

- 循环  
拆分循环  
管道取代循环  

#### 领域模型
- 为什么需要?  
领域模型是对业务需求的本质描述，统一各方的业务语言(业务/产品/技术)  

- 领域分析  
事件风暴 通过头脑风暴梳理所有事件，生产领域模型  

- 代码设计  
实体 有业务状态的实体 e.g. 订单  
值对象 无状态的描述性对象 e.g. 颜色/性别/城市  
服务 与领域对象无关，是通用的业务处理 e.g. 商品价格分摊计算  
事件 实体变更的消息  
聚合 实体 + 值对象  
工厂 构造聚合  
资源库 聚合的资源操作入口  